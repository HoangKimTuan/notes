{"version":3,"sources":["app.js","controllers/appcontroller.js","controllers/notecontroller.js","controllers/notescontroller.js","controllers/notessettingscontroller.js","app.min.js","directives/autofocus.js","directives/editor.js","directives/tooltip.js","filters/and.js","filters/categoryTitle.js","filters/groupNotes.js","filters/wordCount.js","services/debounce.js","services/is.js","services/notesmodel.js","services/savequeue.js","services/urlFinder.js"],"names":["angular","$","requestToken","SimpleMDE","undefined","app","module","config","$provide","$routeProvider","RestangularProvider","$httpProvider","$windowProvider","defaults","headers","common","requesttoken","value","saveInterval","when","templateUrl","controller","resolve","note","$route","$q","is","Restangular","deferred","defer","noteId","current","params","loading","one","get","then","reject","promise","otherwise","redirectTo","baseUrl","OC","generateUrl","setBaseUrl","run","$rootScope","$location","NotesModel","attr","filePath","$on","notes","getAll","length","sorted","sort","a","b","modified","path","id","$scope","init","lastViewedNote","errorMessage","defaultTitle","document","title","Notification","showTemporary","initSearch","search","OCA","Search","query","$apply","css","hasClass","click","$routeParams","SaveQueue","debounce","$document","$timeout","updateIfExists","isSaving","isManualSaving","updateTitle","content","replace","trim","split","t","onEdit","unsaved","autoSave","add","manualSave","error","addManual","editCategory","showEditCategory","val","category","autocomplete","source","getCategories","minLength","position","my","at","of","open","width","innerWidth","addClass","insertAfter","focus","saveCategory","isCategorySaving","customPUT","updatedNote","unbind","bind","event","ctrlKey","metaKey","String","fromCharCode","which","toLowerCase","preventDefault","toggleDistractionFree","launchIntoFullscreen","element","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","getElementById","$watch","newValue","$window","route","notesLoaded","folderSelectorOpen","filterCategory","orderRecent","orderAlpha","filterOrder","notesResource","all","getList","addAll","create","post","remove","$emit","toggleFavorite","favorite","target","blur","categories","toggleFolderSelector","setFilter","animate","scrollTop","categoryFilter","startsWith","isCategory","item","onbeforeunload","i","extensions","settings","isObject","on","msg","show","put","window","location","reload","directive","restrict","link","scope","urlFinder","simplemde","spellChecker","autoDownloadFontAwesome","toolbar","status","forceSync","editorElement","codemirror","getWrapperElement","url","this","isDefined","tooltip","container","filter","$filter","items","searchString","searchValues","filtered","str","prevCat","splice","substring","wordCount","n","factory","func","delay","timeout","context","args","arguments","cancel","apply","notesIds","prototype","type","updated","push","nthIndexOf","pattern","indexOf","maxLevel","details","cat","index","result","name","count","_queue","_flushLock","_manualSaveActive","_flush","keys","Object","self","requests","_noteUpdateRequest","_saveFailed","response","prev","next","text","jQuery","oc_requesttoken"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n/* jshint unused: false */\nvar app = angular.module('Notes', ['restangular', 'ngRoute']).\nconfig(function($provide, $routeProvider, RestangularProvider, $httpProvider,\n                $windowProvider) {\n    'use strict';\n\n    // Always send the CSRF token by default\n    $httpProvider.defaults.headers.common.requesttoken = requestToken;\n\n    // you have to use $provide inside the config method to provide a globally\n    // shared and injectable object\n    $provide.value('Constants', {\n        saveInterval: 5*1000  // miliseconds\n    });\n\n    // define your routes that that load templates into the ng-view\n    $routeProvider.when('/notes/:noteId', {\n        templateUrl: 'note.html',\n        controller: 'NoteController',\n        resolve: {\n            // $routeParams does not work inside resolve so use $route\n            // note is the name of the argument that will be injected into the\n            // controller\n            /* @ngInject */\n            note: function ($route, $q, is, Restangular) {\n\n                var deferred = $q.defer();\n                var noteId = $route.current.params.noteId;\n                is.loading = true;\n\n                Restangular.one('notes', noteId).get().then(function (note) {\n                    is.loading = false;\n                    deferred.resolve(note);\n                }, function () {\n                    is.loading = false;\n                    deferred.reject();\n                });\n\n                return deferred.promise;\n            }\n        }\n    }).otherwise({\n        redirectTo: '/'\n    });\n\n    var baseUrl = OC.generateUrl('/apps/notes');\n    RestangularProvider.setBaseUrl(baseUrl);\n\n\n\n}).run(function ($rootScope, $location, NotesModel) {\n    'use strict';\n\n    $('link[rel=\"shortcut icon\"]').attr(\n\t\t    'href',\n\t\t    OC.filePath('notes', 'img', 'favicon.png')\n    );\n\n    // handle route errors\n    $rootScope.$on('$routeChangeError', function () {\n        var notes = NotesModel.getAll();\n\n        // route change error should redirect to the latest note if possible\n        if (notes.length > 0) {\n            var sorted = notes.sort(function (a, b) {\n                if(a.modified > b.modified) {\n                    return 1;\n                } else if(a.modified < b.modified) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            });\n\n            var note = notes[sorted.length-1];\n            $location.path('/notes/' + note.id);\n        } else {\n            $location.path('/');\n        }\n    });\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('AppController', function ($scope, $location, is) {\n    'use strict';\n\n    $scope.is = is;\n\n    $scope.init = function (lastViewedNote, errorMessage) {\n        $scope.defaultTitle = document.title;\n\n        if(lastViewedNote !== 0 && $location.path()==='') {\n            $location.path('/notes/' + lastViewedNote);\n        }\n        if(errorMessage) {\n            OC.Notification.showTemporary(errorMessage);\n        }\n        $scope.initSearch();\n    };\n\n    $scope.search = '';\n    $scope.defaultTitle = null;\n\n    $scope.initSearch = function() {\n        new OCA.Search(\n            function (query) {\n                $scope.search = query;\n                $scope.$apply();\n                if($('#app-navigation-toggle').css('display')!=='none' &&\n                        !$('body').hasClass('snapjs-left')) {\n                    $('#app-navigation-toggle').click();\n                }\n            },\n            function () {\n                $scope.search = '';\n                $scope.$apply();\n            }\n        );\n    };\n\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('NoteController', function($routeParams, $scope, NotesModel,\n                                          SaveQueue, note, debounce,\n                                          $document, $timeout) {\n    'use strict';\n\n    NotesModel.updateIfExists(note);\n\n    $scope.note = NotesModel.get($routeParams.noteId);\n\n    $scope.isSaving = function () {\n        return SaveQueue.isSaving();\n    };\n    $scope.isManualSaving = function () {\n        return SaveQueue.isManualSaving();\n    };\n\n    $scope.updateTitle = function () {\n        var content = $scope.note.content;\n\n        // prepare content: remove markdown characters and empty spaces\n        content = content.replace(/^\\s*[*+-]\\s+/mg, ''); // list item\n        content = content.replace(/^#+\\s+(.*?)\\s*#*$/mg, '$1'); // headline\n        content = content.replace(/^(=+|-+)$/mg, ''); // separate headline\n        content = content.replace(/(\\*+|_+)(.*?)\\1/mg, '$2'); // emphasis\n\n        // prevent directory traversal, illegal characters\n        content = content.replace(/[\\*\\|\\/\\\\\\:\\\"<>\\?]/g, '');\n        // prevent unintended file names\n        content = content.replace(/^[\\. ]+/mg, '');\n\n        // generate title from the first line of the content\n        $scope.note.title = content.trim().split(/\\r?\\n/, 2)[0] ||\n            t('notes', 'New note');\n    };\n\n    $scope.onEdit = function() {\n        var note = $scope.note;\n        note.unsaved = true;\n        $scope.autoSave(note);\n    };\n\n    $scope.autoSave = debounce(function(note) {\n        SaveQueue.add(note);\n    }, 1000);\n\n    $scope.manualSave = function() {\n        var note = $scope.note;\n        note.error = false;\n        SaveQueue.addManual(note);\n    };\n\n    $scope.editCategory = false;\n    $scope.showEditCategory = function() {\n        $('#category').val($scope.note.category);\n        $scope.editCategory = true;\n        $('#category').autocomplete({\n            source: NotesModel.getCategories(NotesModel.getAll(), 0, false),\n            minLength: 0,\n            position: { my: 'left bottom', at: 'left top', of: '#category' },\n            open: function() {\n                 $timeout(function() {\n                     var width = $('form.category').innerWidth() - 2;\n                     $('.ui-autocomplete.ui-menu').width(width);\n                 });\n            },\n        }).autocomplete('widget').addClass('category-autocomplete');\n        // fix space between input and confirm-button\n        $('form.category .icon-confirm').insertAfter('#category');\n\n        $timeout(function() {\n            $('#category').focus();\n                $('#category').autocomplete('search', '');\n        });\n    };\n    $scope.saveCategory = function () {\n        var category = $('#category').val();\n        if($scope.note.category === category) {\n            $scope.editCategory = false;\n            return;\n        }\n        $scope.isCategorySaving = true;\n        $scope.note.customPUT({category: category}, 'category', {}, {})\n        .then(\n            function (updatedNote) {\n                $scope.note.category = updatedNote.category;\n                if(category !== updatedNote.category) {\n                    OC.Notification.showTemporary(\n                        t('notes', 'Updating the note\\'s category has failed.'+\n                                   ' Is the target directory writable?')\n                    );\n                }\n            },\n            function () {\n                OC.Notification.showTemporary(\n                    t('notes', 'Updating the note\\'s category has failed.')\n                );\n            }\n        )\n        .finally(\n            function () {\n                $scope.isCategorySaving = false;\n                $scope.editCategory = false;\n            }\n        );\n    };\n\n\n    $document.unbind('keypress.notes.save');\n    $document.bind('keypress.notes.save', function(event) {\n        if(event.ctrlKey || event.metaKey) {\n            switch(String.fromCharCode(event.which).toLowerCase()) {\n                case 's':\n                    event.preventDefault();\n                    $scope.manualSave();\n                    break;\n            }\n        }\n    });\n\n    $scope.toggleDistractionFree = function() {\n        function launchIntoFullscreen(element) {\n            if(element.requestFullscreen) {\n                element.requestFullscreen();\n            } else if(element.mozRequestFullScreen) {\n                element.mozRequestFullScreen();\n            } else if(element.webkitRequestFullscreen) {\n                element.webkitRequestFullscreen();\n            } else if(element.msRequestFullscreen) {\n                element.msRequestFullscreen();\n            }\n        }\n\n        function exitFullscreen() {\n            if(document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if(document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if(document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            }\n        }\n\n        if(document.fullscreenElement ||\n           document.mozFullScreenElement ||\n           document.webkitFullscreenElement) {\n            exitFullscreen();\n        } else {\n            launchIntoFullscreen(document.getElementById('app-content'));\n        }\n    };\n\n    $scope.$watch(function() {\n        return $scope.note.title;\n    }, function(newValue) {\n        if(newValue) {\n            document.title = newValue + ' - ' + $scope.defaultTitle;\n        } else {\n            document.title = $scope.defaultTitle;\n        }\n    });\n\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// This is available by using ng-controller=\"NotesController\" in your HTML\napp.controller('NotesController', function($routeParams, $scope, $location,\n                                           Restangular, NotesModel, $window) {\n    'use strict';\n\n    $scope.route = $routeParams;\n    $scope.notesLoaded = false;\n    $scope.notes = NotesModel.getAll();\n\n    $scope.folderSelectorOpen = false;\n    $scope.filterCategory = null;\n\n    $scope.orderRecent = ['-favorite','-modified'];\n    $scope.orderAlpha = ['category','-favorite','title'];\n    $scope.filterOrder = $scope.orderRecent;\n\n    var notesResource = Restangular.all('notes');\n\n    // initial request for getting all notes\n    notesResource.getList().then(function (notes) {\n        NotesModel.addAll(notes);\n        $scope.notesLoaded = true;\n    });\n\n    $scope.create = function () {\n        notesResource.post({category: $scope.filterCategory})\n                     .then(function (note) {\n            NotesModel.add(note);\n            $location.path('/notes/' + note.id);\n        });\n    };\n\n    $scope.delete = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.remove().then(function () {\n            NotesModel.remove(noteId);\n            $scope.$emit('$routeChangeError');\n        });\n    };\n\n    $scope.toggleFavorite = function (noteId, event) {\n        var note = NotesModel.get(noteId);\n        note.customPUT({favorite: !note.favorite},\n            'favorite', {}, {}).then(function (favorite) {\n            note.favorite = favorite ? true : false;\n        });\n        event.target.blur();\n    };\n\n    $scope.categories = [];\n    $scope.$watch('notes', function(notes) {\n        $scope.categories = NotesModel.getCategories(notes, 1, true);\n    }, true);\n\n    $scope.toggleFolderSelector = function () {\n        $scope.folderSelectorOpen = !$scope.folderSelectorOpen;\n    };\n\n    $scope.setFilter = function (category) {\n        if(category===null) {\n            $scope.filterOrder = $scope.orderRecent;\n        } else {\n            $scope.filterOrder = $scope.orderAlpha;\n        }\n        $scope.filterCategory = category;\n        $scope.folderSelectorOpen = false;\n        $('#app-navigation > ul').animate({scrollTop: 0}, 'fast');\n    };\n\n    $scope.categoryFilter = function (note) {\n        if($scope.filterCategory!==null) {\n            if(note.category===$scope.filterCategory) {\n                return true;\n            } else if(note.category!==null) {\n                return note.category.startsWith($scope.filterCategory+'/');\n            }\n        }\n        return true;\n    };\n\n    $scope.isCategory = function (item) {\n        return typeof item === 'string';\n    };\n\n    $window.onbeforeunload = function() {\n        var notes = NotesModel.getAll();\n        for(var i=0; i<notes.length; i+=1) {\n            if(notes[i].unsaved) {\n                return t('notes', 'There are unsaved notes. Leaving ' +\n                                  'the page will discard all changes!');\n            }\n        }\n        return null;\n    };\n});\n","app.controller('NotesSettingsController',\n               function($scope, Restangular, $document) {\n    'use strict';\n\n    $scope.extensions = ['.txt', '.md'];\n\n    Restangular.one('settings').get().then(function(settings) {\n        if(angular.isObject(settings)) {\n            $scope.settings = settings;\n        } else {\n            $scope.settings = Restangular.one('settings');\n        }\n    });\n\n    $document.on('change', '#notesPath', function() {\n        var msg = t('notes', 'Please wait while new settings are applied…');\n        OC.Notification.show(msg);\n        $scope.settings.put().then(function() {\n            window.location.reload(true);\n        });\n    });\n\n    $document.on('change', '#fileSuffix', function() {\n        $scope.settings.put();\n    });\n});\n","(function(angular, $, requestToken, SimpleMDE, undefined){'use strict';/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n/* jshint unused: false */\nvar app = angular.module('Notes', ['restangular', 'ngRoute']).\nconfig([\"$provide\", \"$routeProvider\", \"RestangularProvider\", \"$httpProvider\", \"$windowProvider\", function($provide, $routeProvider, RestangularProvider, $httpProvider,\n                $windowProvider) {\n    'use strict';\n\n    // Always send the CSRF token by default\n    $httpProvider.defaults.headers.common.requesttoken = requestToken;\n\n    // you have to use $provide inside the config method to provide a globally\n    // shared and injectable object\n    $provide.value('Constants', {\n        saveInterval: 5*1000  // miliseconds\n    });\n\n    // define your routes that that load templates into the ng-view\n    $routeProvider.when('/notes/:noteId', {\n        templateUrl: 'note.html',\n        controller: 'NoteController',\n        resolve: {\n            // $routeParams does not work inside resolve so use $route\n            // note is the name of the argument that will be injected into the\n            // controller\n            /* @ngInject */\n            note: [\"$route\", \"$q\", \"is\", \"Restangular\", function ($route, $q, is, Restangular) {\n\n                var deferred = $q.defer();\n                var noteId = $route.current.params.noteId;\n                is.loading = true;\n\n                Restangular.one('notes', noteId).get().then(function (note) {\n                    is.loading = false;\n                    deferred.resolve(note);\n                }, function () {\n                    is.loading = false;\n                    deferred.reject();\n                });\n\n                return deferred.promise;\n            }]\n        }\n    }).otherwise({\n        redirectTo: '/'\n    });\n\n    var baseUrl = OC.generateUrl('/apps/notes');\n    RestangularProvider.setBaseUrl(baseUrl);\n\n\n\n}]).run([\"$rootScope\", \"$location\", \"NotesModel\", function ($rootScope, $location, NotesModel) {\n    'use strict';\n\n    $('link[rel=\"shortcut icon\"]').attr(\n\t\t    'href',\n\t\t    OC.filePath('notes', 'img', 'favicon.png')\n    );\n\n    // handle route errors\n    $rootScope.$on('$routeChangeError', function () {\n        var notes = NotesModel.getAll();\n\n        // route change error should redirect to the latest note if possible\n        if (notes.length > 0) {\n            var sorted = notes.sort(function (a, b) {\n                if(a.modified > b.modified) {\n                    return 1;\n                } else if(a.modified < b.modified) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            });\n\n            var note = notes[sorted.length-1];\n            $location.path('/notes/' + note.id);\n        } else {\n            $location.path('/');\n        }\n    });\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('AppController', [\"$scope\", \"$location\", \"is\", function ($scope, $location, is) {\n    'use strict';\n\n    $scope.is = is;\n\n    $scope.init = function (lastViewedNote, errorMessage) {\n        $scope.defaultTitle = document.title;\n\n        if(lastViewedNote !== 0 && $location.path()==='') {\n            $location.path('/notes/' + lastViewedNote);\n        }\n        if(errorMessage) {\n            OC.Notification.showTemporary(errorMessage);\n        }\n        $scope.initSearch();\n    };\n\n    $scope.search = '';\n    $scope.defaultTitle = null;\n\n    $scope.initSearch = function() {\n        new OCA.Search(\n            function (query) {\n                $scope.search = query;\n                $scope.$apply();\n                if($('#app-navigation-toggle').css('display')!=='none' &&\n                        !$('body').hasClass('snapjs-left')) {\n                    $('#app-navigation-toggle').click();\n                }\n            },\n            function () {\n                $scope.search = '';\n                $scope.$apply();\n            }\n        );\n    };\n\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('NoteController', [\"$routeParams\", \"$scope\", \"NotesModel\", \"SaveQueue\", \"note\", \"debounce\", \"$document\", \"$timeout\", function($routeParams, $scope, NotesModel,\n                                          SaveQueue, note, debounce,\n                                          $document, $timeout) {\n    'use strict';\n\n    NotesModel.updateIfExists(note);\n\n    $scope.note = NotesModel.get($routeParams.noteId);\n\n    $scope.isSaving = function () {\n        return SaveQueue.isSaving();\n    };\n    $scope.isManualSaving = function () {\n        return SaveQueue.isManualSaving();\n    };\n\n    $scope.updateTitle = function () {\n        var content = $scope.note.content;\n\n        // prepare content: remove markdown characters and empty spaces\n        content = content.replace(/^\\s*[*+-]\\s+/mg, ''); // list item\n        content = content.replace(/^#+\\s+(.*?)\\s*#*$/mg, '$1'); // headline\n        content = content.replace(/^(=+|-+)$/mg, ''); // separate headline\n        content = content.replace(/(\\*+|_+)(.*?)\\1/mg, '$2'); // emphasis\n\n        // prevent directory traversal, illegal characters\n        content = content.replace(/[\\*\\|\\/\\\\\\:\\\"<>\\?]/g, '');\n        // prevent unintended file names\n        content = content.replace(/^[\\. ]+/mg, '');\n\n        // generate title from the first line of the content\n        $scope.note.title = content.trim().split(/\\r?\\n/, 2)[0] ||\n            t('notes', 'New note');\n    };\n\n    $scope.onEdit = function() {\n        var note = $scope.note;\n        note.unsaved = true;\n        $scope.autoSave(note);\n    };\n\n    $scope.autoSave = debounce(function(note) {\n        SaveQueue.add(note);\n    }, 1000);\n\n    $scope.manualSave = function() {\n        var note = $scope.note;\n        note.error = false;\n        SaveQueue.addManual(note);\n    };\n\n    $scope.editCategory = false;\n    $scope.showEditCategory = function() {\n        $('#category').val($scope.note.category);\n        $scope.editCategory = true;\n        $('#category').autocomplete({\n            source: NotesModel.getCategories(NotesModel.getAll(), 0, false),\n            minLength: 0,\n            position: { my: 'left bottom', at: 'left top', of: '#category' },\n            open: function() {\n                 $timeout(function() {\n                     var width = $('form.category').innerWidth() - 2;\n                     $('.ui-autocomplete.ui-menu').width(width);\n                 });\n            },\n        }).autocomplete('widget').addClass('category-autocomplete');\n        // fix space between input and confirm-button\n        $('form.category .icon-confirm').insertAfter('#category');\n\n        $timeout(function() {\n            $('#category').focus();\n                $('#category').autocomplete('search', '');\n        });\n    };\n    $scope.saveCategory = function () {\n        var category = $('#category').val();\n        if($scope.note.category === category) {\n            $scope.editCategory = false;\n            return;\n        }\n        $scope.isCategorySaving = true;\n        $scope.note.customPUT({category: category}, 'category', {}, {})\n        .then(\n            function (updatedNote) {\n                $scope.note.category = updatedNote.category;\n                if(category !== updatedNote.category) {\n                    OC.Notification.showTemporary(\n                        t('notes', 'Updating the note\\'s category has failed.'+\n                                   ' Is the target directory writable?')\n                    );\n                }\n            },\n            function () {\n                OC.Notification.showTemporary(\n                    t('notes', 'Updating the note\\'s category has failed.')\n                );\n            }\n        )\n        .finally(\n            function () {\n                $scope.isCategorySaving = false;\n                $scope.editCategory = false;\n            }\n        );\n    };\n\n\n    $document.unbind('keypress.notes.save');\n    $document.bind('keypress.notes.save', function(event) {\n        if(event.ctrlKey || event.metaKey) {\n            switch(String.fromCharCode(event.which).toLowerCase()) {\n                case 's':\n                    event.preventDefault();\n                    $scope.manualSave();\n                    break;\n            }\n        }\n    });\n\n    $scope.toggleDistractionFree = function() {\n        function launchIntoFullscreen(element) {\n            if(element.requestFullscreen) {\n                element.requestFullscreen();\n            } else if(element.mozRequestFullScreen) {\n                element.mozRequestFullScreen();\n            } else if(element.webkitRequestFullscreen) {\n                element.webkitRequestFullscreen();\n            } else if(element.msRequestFullscreen) {\n                element.msRequestFullscreen();\n            }\n        }\n\n        function exitFullscreen() {\n            if(document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if(document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if(document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            }\n        }\n\n        if(document.fullscreenElement ||\n           document.mozFullScreenElement ||\n           document.webkitFullscreenElement) {\n            exitFullscreen();\n        } else {\n            launchIntoFullscreen(document.getElementById('app-content'));\n        }\n    };\n\n    $scope.$watch(function() {\n        return $scope.note.title;\n    }, function(newValue) {\n        if(newValue) {\n            document.title = newValue + ' - ' + $scope.defaultTitle;\n        } else {\n            document.title = $scope.defaultTitle;\n        }\n    });\n\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// This is available by using ng-controller=\"NotesController\" in your HTML\napp.controller('NotesController', [\"$routeParams\", \"$scope\", \"$location\", \"Restangular\", \"NotesModel\", \"$window\", function($routeParams, $scope, $location,\n                                           Restangular, NotesModel, $window) {\n    'use strict';\n\n    $scope.route = $routeParams;\n    $scope.notesLoaded = false;\n    $scope.notes = NotesModel.getAll();\n\n    $scope.folderSelectorOpen = false;\n    $scope.filterCategory = null;\n\n    $scope.orderRecent = ['-favorite','-modified'];\n    $scope.orderAlpha = ['category','-favorite','title'];\n    $scope.filterOrder = $scope.orderRecent;\n\n    var notesResource = Restangular.all('notes');\n\n    // initial request for getting all notes\n    notesResource.getList().then(function (notes) {\n        NotesModel.addAll(notes);\n        $scope.notesLoaded = true;\n    });\n\n    $scope.create = function () {\n        notesResource.post({category: $scope.filterCategory})\n                     .then(function (note) {\n            NotesModel.add(note);\n            $location.path('/notes/' + note.id);\n        });\n    };\n\n    $scope.delete = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.remove().then(function () {\n            NotesModel.remove(noteId);\n            $scope.$emit('$routeChangeError');\n        });\n    };\n\n    $scope.toggleFavorite = function (noteId, event) {\n        var note = NotesModel.get(noteId);\n        note.customPUT({favorite: !note.favorite},\n            'favorite', {}, {}).then(function (favorite) {\n            note.favorite = favorite ? true : false;\n        });\n        event.target.blur();\n    };\n\n    $scope.categories = [];\n    $scope.$watch('notes', function(notes) {\n        $scope.categories = NotesModel.getCategories(notes, 1, true);\n    }, true);\n\n    $scope.toggleFolderSelector = function () {\n        $scope.folderSelectorOpen = !$scope.folderSelectorOpen;\n    };\n\n    $scope.setFilter = function (category) {\n        if(category===null) {\n            $scope.filterOrder = $scope.orderRecent;\n        } else {\n            $scope.filterOrder = $scope.orderAlpha;\n        }\n        $scope.filterCategory = category;\n        $scope.folderSelectorOpen = false;\n        $('#app-navigation > ul').animate({scrollTop: 0}, 'fast');\n    };\n\n    $scope.categoryFilter = function (note) {\n        if($scope.filterCategory!==null) {\n            if(note.category===$scope.filterCategory) {\n                return true;\n            } else if(note.category!==null) {\n                return note.category.startsWith($scope.filterCategory+'/');\n            }\n        }\n        return true;\n    };\n\n    $scope.isCategory = function (item) {\n        return typeof item === 'string';\n    };\n\n    $window.onbeforeunload = function() {\n        var notes = NotesModel.getAll();\n        for(var i=0; i<notes.length; i+=1) {\n            if(notes[i].unsaved) {\n                return t('notes', 'There are unsaved notes. Leaving ' +\n                                  'the page will discard all changes!');\n            }\n        }\n        return null;\n    };\n}]);\n\napp.controller('NotesSettingsController',\n               [\"$scope\", \"Restangular\", \"$document\", function($scope, Restangular, $document) {\n    'use strict';\n\n    $scope.extensions = ['.txt', '.md'];\n\n    Restangular.one('settings').get().then(function(settings) {\n        if(angular.isObject(settings)) {\n            $scope.settings = settings;\n        } else {\n            $scope.settings = Restangular.one('settings');\n        }\n    });\n\n    $document.on('change', '#notesPath', function() {\n        var msg = t('notes', 'Please wait while new settings are applied…');\n        OC.Notification.show(msg);\n        $scope.settings.put().then(function() {\n            window.location.reload(true);\n        });\n    });\n\n    $document.on('change', '#fileSuffix', function() {\n        $scope.settings.put();\n    });\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesAutofocus', function () {\n    'use strict';\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.focus();\n        }\n    };\n});\n\n/*global SimpleMDE*/\napp.directive('editor', ['$timeout',\n                         'urlFinder',\n                         function ($timeout, urlFinder) {\n\t'use strict';\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function(scope, element) {\n\n\t\t\tvar simplemde = new SimpleMDE({\n\t\t\t\telement: element[0],\n\t\t\t\tspellChecker: false,\n\t\t\t\tautoDownloadFontAwesome: false,\n\t\t\t\ttoolbar: false,\n\t\t\t\tstatus: false,\n\t\t\t\tforceSync: true\n\t\t\t});\n\t\t\tvar editorElement = $(simplemde.codemirror.getWrapperElement());\n\n\t\t\tsimplemde.value(scope.note.content);\n\t\t\tsimplemde.codemirror.focus();\n\n\t\t\tsimplemde.codemirror.on('change', function() {\n\t\t\t\t$timeout(function() {\n\t\t\t\t\tscope.$apply(function () {\n\t\t\t\t\t\tscope.note.content = simplemde.value();\n\t\t\t\t\t\tscope.onEdit();\n\t\t\t\t\t\tscope.updateTitle();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\teditorElement.on('click', '.cm-link, .cm-url', function(event) {\n\t\t\t\tif(event.ctrlKey) {\n\t\t\t\t\tvar url = urlFinder(this);\n\t\t\t\t\tif(angular.isDefined(url)) {\n\t\t\t\t\t\twindow.open(url, '_blank');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesTooltip', function () {\n    'use strict';\n\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.tooltip({'container': 'body'});\n\n            element.on('$destroy', function() {\n                element.tooltip('hide');\n            });\n\n            element.on('click', function() {\n                element.tooltip('hide');\n            });\n        }\n    };\n});\n\n/**\n * filter by multiple words (AND operation)\n */\napp.filter('and', ['$filter', function ($filter) {\n\t'use strict';\n\treturn function (items, searchString) {\n\t\tvar searchValues = searchString.split(' ');\n\t\tvar filtered = items;\n\t\tfor(var i in searchValues) {\n\t\t\tfiltered = $filter('filter')(filtered, searchValues[i]);\n\t\t}\n\t\treturn filtered;\n\t};\n}]);\n\napp.filter('categoryTitle', function () {\n\t'use strict';\n\treturn function (str) {\n\t\tif (str && (typeof str === 'string')) {\n\t\t\treturn str.replace(/\\//g, ' / ');\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t};\n});\n\n/**\n * group notes by (sub) category\n */\napp.filter('groupNotes', function () {\n\t'use strict';\n\treturn function (items, category) {\n\t\tif(category) {\n\t\t\tvar prevCat = null;\n\t\t\tfor(var i=0; i<items.length; i+=1) {\n\t\t\t\tvar note = items[i];\n\t\t\t\tif(prevCat !== null && prevCat !== note.category) {\n\t\t\t\t\titems.splice(i, 0,\n\t\t\t\t\t\tnote.category.substring(category.length+1));\n\t\t\t\t}\n\t\t\t\tprevCat = note.category;\n\t\t\t}\n\t\t\treturn items;\n\t\t} else {\n\t\t\treturn items;\n\t\t}\n\t};\n});\n\napp.filter('wordCount', function () {\n\t'use strict';\n\treturn function (value) {\n\t\tif (value && (typeof value === 'string')) {\n\t\t\tvar wordCount = value.split(/\\s+/).filter(\n\t\t\t\t// only count words containing\n\t\t\t\t// at least one alphanumeric character\n\t\t\t\tfunction(value) {\n\t\t\t\t\treturn value.search(/[A-Za-z0-9]/) !== -1;\n\t\t\t\t}\n\t\t\t).length;\n\t\t\treturn window.n('notes', '%n word', '%n words', wordCount);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n});\n\n/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('debounce', ['$timeout', function($timeout) {\n\t'use strict';\n\n\treturn function debounce(func, delay) {\n\t\tvar timeout;\n\n\t\treturn function() {\n\t\t\tvar context = this, args = arguments;\n\n\t\t\tif(timeout) {\n\t\t\t\t$timeout.cancel(timeout);\n\t\t\t}\n\t\t\ttimeout = $timeout(function() {\n\t\t\t\tfunc.apply(context, args);\n\t\t\t}, delay);\n\t\t};\n\t};\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('is', function () {\n    'use strict';\n\n    return {\n        loading: false\n    };\n});\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// take care of fileconflicts by appending a number\napp.factory('NotesModel', function () {\n    'use strict';\n\n    var NotesModel = function () {\n        this.notes = [];\n        this.notesIds = {};\n    };\n\n    NotesModel.prototype = {\n        addAll: function (notes) {\n            for(var i=0; i<notes.length; i+=1) {\n                this.add(notes[i]);\n            }\n        },\n        add: function(note) {\n            this.updateIfExists(note);\n        },\n        getAll: function () {\n            return this.notes;\n        },\n        get: function (id) {\n            if(this.notesIds[id].error) {\n                OC.Notification.show(\n                    this.notesIds[id].errorMessage,\n                    { type: 'error' }\n                );\n                return false;\n            }\n            return this.notesIds[id];\n        },\n        updateIfExists: function(updated) {\n            var note = this.notesIds[updated.id];\n            if(angular.isDefined(note)) {\n                // don't update meta-data over full data\n                if(updated.content !== null || note.content === null) {\n                    note.title = updated.title;\n                    note.modified = updated.modified;\n                    note.content = updated.content;\n                    note.favorite = updated.favorite;\n                    note.category = updated.category;\n                    note.error = updated.error;\n                    note.errorMessage = updated.errorMessage;\n                }\n            } else {\n                this.notes.push(updated);\n                this.notesIds[updated.id] = updated;\n            }\n        },\n        remove: function (id) {\n            for(var i=0; i<this.notes.length; i+=1) {\n                var note = this.notes[i];\n                if(note.id === id) {\n                    this.notes.splice(i, 1);\n                    delete this.notesIds[id];\n                    break;\n                }\n            }\n        },\n\n        nthIndexOf: function(str, pattern, n) {\n            var i = -1;\n            while (n-- && i++ < str.length) {\n                i = str.indexOf(pattern, i);\n                if (i < 0) {\n                    break;\n                }\n             }\n             return i;\n         },\n\n         getCategories: function (notes, maxLevel, details) {\n             var categories = {};\n             for(var i=0; i<notes.length; i+=1) {\n                 var cat = notes[i].category;\n                 if(maxLevel>0) {\n                     var index = this.nthIndexOf(cat, '/', maxLevel);\n                     if(index>0) {\n                         cat = cat.substring(0, index);\n                     }\n                 }\n                 if(categories[cat]===undefined) {\n                     categories[cat] = 1;\n                 } else {\n                     categories[cat] += 1;\n                 }\n             }\n             var result = [];\n             for(var category in categories) {\n                 if(details) {\n                     result.push({\n                         name: category,\n                         count: categories[category],\n                     });\n                 } else if(category) {\n                     result.push(category);\n                 }\n             }\n             if(!details) {\n                 result.sort();\n             }\n             return result;\n         },\n\n    };\n\n    return new NotesModel();\n});\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('SaveQueue', [\"$q\", function($q) {\n    'use strict';\n\n    var SaveQueue = function () {\n        this._queue = {};\n        this._flushLock = false;\n        this._manualSaveActive = false;\n    };\n\n    SaveQueue.prototype = {\n        add: function (note) {\n            this._queue[note.id] = note;\n            this._flush();\n        },\n        addManual: function (note) {\n            this._manualSaveActive = true;\n            this.add(note);\n        },\n        _flush: function () {\n            // if there are no changes dont execute the requests\n            var keys = Object.keys(this._queue);\n            if(keys.length === 0 || this._flushLock) {\n                return;\n            } else {\n                this._flushLock = true;\n            }\n\n            var self = this;\n            var requests = [];\n\n            // iterate over updated objects and run an update request for\n            // each one of them\n            for(var i=0; i<keys.length; i+=1) {\n                var note = this._queue[keys[i]];\n                // if the update finished, update the modified and title\n                // attributes on the note\n                requests.push(note.put().then(\n                    this._noteUpdateRequest.bind(null, note))\n                    .catch(this._saveFailed.bind(null, note))\n                );\n            }\n            this._queue = {};\n\n            // if all update requests are completed, run the flush\n            // again to update the next batch of queued notes\n            $q.all(requests).then(function () {\n                self._flushLock = false;\n                self._flush();\n                self._manualSaveActive = false;\n            });\n        },\n        _noteUpdateRequest: function (note, response) {\n            note.error = false;\n            note.title = response.title;\n            note.modified = response.modified;\n            note.category = response.category;\n            if(response.content === note.content) {\n                note.unsaved = false;\n            }\n        },\n        _saveFailed: function (note) {\n            note.error = true;\n        },\n        isSaving: function () {\n            return this._flushLock;\n        },\n        isManualSaving: function () {\n            return this._manualSaveActive;\n        },\n    };\n\n    return new SaveQueue();\n}]);\n\n/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// finds the url which should be opened when a link is clicked\n// example: '[hello](http://example.com)'\napp.factory('urlFinder', [function() {\n\t'use strict';\n\n\treturn function urlFinder(element) {\n\t\telement = $(element);\n\n\t\t// special case: click on ')'\n\t\tif(element.is('.cm-url.cm-formatting')) {\n\t\t\tif(element.prev().length !== 0) {\n\t\t\t\telement = element.prev();\n\t\t\t}\n\t\t}\n\n\t\t// skip '[hello]'\n\t\twhile(element.is('.cm-link')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// skip '('\n\t\twhile(element.is('.cm-url.cm-formatting')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// check if we actually have a cm-url\n\t\tif(element.is('.cm-url:not(.cm-formatting)')) {\n\t\t\treturn element.text();\n\t\t}\n\n\t\treturn undefined;\n\t};\n}]);\n})(angular, jQuery, oc_requesttoken, SimpleMDE);","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesAutofocus', function () {\n    'use strict';\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.focus();\n        }\n    };\n});\n","/*global SimpleMDE*/\napp.directive('editor', ['$timeout',\n                         'urlFinder',\n                         function ($timeout, urlFinder) {\n\t'use strict';\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function(scope, element) {\n\n\t\t\tvar simplemde = new SimpleMDE({\n\t\t\t\telement: element[0],\n\t\t\t\tspellChecker: false,\n\t\t\t\tautoDownloadFontAwesome: false,\n\t\t\t\ttoolbar: false,\n\t\t\t\tstatus: false,\n\t\t\t\tforceSync: true\n\t\t\t});\n\t\t\tvar editorElement = $(simplemde.codemirror.getWrapperElement());\n\n\t\t\tsimplemde.value(scope.note.content);\n\t\t\tsimplemde.codemirror.focus();\n\n\t\t\tsimplemde.codemirror.on('change', function() {\n\t\t\t\t$timeout(function() {\n\t\t\t\t\tscope.$apply(function () {\n\t\t\t\t\t\tscope.note.content = simplemde.value();\n\t\t\t\t\t\tscope.onEdit();\n\t\t\t\t\t\tscope.updateTitle();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\teditorElement.on('click', '.cm-link, .cm-url', function(event) {\n\t\t\t\tif(event.ctrlKey) {\n\t\t\t\t\tvar url = urlFinder(this);\n\t\t\t\t\tif(angular.isDefined(url)) {\n\t\t\t\t\t\twindow.open(url, '_blank');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}]);\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesTooltip', function () {\n    'use strict';\n\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.tooltip({'container': 'body'});\n\n            element.on('$destroy', function() {\n                element.tooltip('hide');\n            });\n\n            element.on('click', function() {\n                element.tooltip('hide');\n            });\n        }\n    };\n});\n","/**\n * filter by multiple words (AND operation)\n */\napp.filter('and', ['$filter', function ($filter) {\n\t'use strict';\n\treturn function (items, searchString) {\n\t\tvar searchValues = searchString.split(' ');\n\t\tvar filtered = items;\n\t\tfor(var i in searchValues) {\n\t\t\tfiltered = $filter('filter')(filtered, searchValues[i]);\n\t\t}\n\t\treturn filtered;\n\t};\n}]);\n","app.filter('categoryTitle', function () {\n\t'use strict';\n\treturn function (str) {\n\t\tif (str && (typeof str === 'string')) {\n\t\t\treturn str.replace(/\\//g, ' / ');\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t};\n});\n","/**\n * group notes by (sub) category\n */\napp.filter('groupNotes', function () {\n\t'use strict';\n\treturn function (items, category) {\n\t\tif(category) {\n\t\t\tvar prevCat = null;\n\t\t\tfor(var i=0; i<items.length; i+=1) {\n\t\t\t\tvar note = items[i];\n\t\t\t\tif(prevCat !== null && prevCat !== note.category) {\n\t\t\t\t\titems.splice(i, 0,\n\t\t\t\t\t\tnote.category.substring(category.length+1));\n\t\t\t\t}\n\t\t\t\tprevCat = note.category;\n\t\t\t}\n\t\t\treturn items;\n\t\t} else {\n\t\t\treturn items;\n\t\t}\n\t};\n});\n","app.filter('wordCount', function () {\n\t'use strict';\n\treturn function (value) {\n\t\tif (value && (typeof value === 'string')) {\n\t\t\tvar wordCount = value.split(/\\s+/).filter(\n\t\t\t\t// only count words containing\n\t\t\t\t// at least one alphanumeric character\n\t\t\t\tfunction(value) {\n\t\t\t\t\treturn value.search(/[A-Za-z0-9]/) !== -1;\n\t\t\t\t}\n\t\t\t).length;\n\t\t\treturn window.n('notes', '%n word', '%n words', wordCount);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n});\n","/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('debounce', ['$timeout', function($timeout) {\n\t'use strict';\n\n\treturn function debounce(func, delay) {\n\t\tvar timeout;\n\n\t\treturn function() {\n\t\t\tvar context = this, args = arguments;\n\n\t\t\tif(timeout) {\n\t\t\t\t$timeout.cancel(timeout);\n\t\t\t}\n\t\t\ttimeout = $timeout(function() {\n\t\t\t\tfunc.apply(context, args);\n\t\t\t}, delay);\n\t\t};\n\t};\n}]);\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('is', function () {\n    'use strict';\n\n    return {\n        loading: false\n    };\n});","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// take care of fileconflicts by appending a number\napp.factory('NotesModel', function () {\n    'use strict';\n\n    var NotesModel = function () {\n        this.notes = [];\n        this.notesIds = {};\n    };\n\n    NotesModel.prototype = {\n        addAll: function (notes) {\n            for(var i=0; i<notes.length; i+=1) {\n                this.add(notes[i]);\n            }\n        },\n        add: function(note) {\n            this.updateIfExists(note);\n        },\n        getAll: function () {\n            return this.notes;\n        },\n        get: function (id) {\n            if(this.notesIds[id].error) {\n                OC.Notification.show(\n                    this.notesIds[id].errorMessage,\n                    { type: 'error' }\n                );\n                return false;\n            }\n            return this.notesIds[id];\n        },\n        updateIfExists: function(updated) {\n            var note = this.notesIds[updated.id];\n            if(angular.isDefined(note)) {\n                // don't update meta-data over full data\n                if(updated.content !== null || note.content === null) {\n                    note.title = updated.title;\n                    note.modified = updated.modified;\n                    note.content = updated.content;\n                    note.favorite = updated.favorite;\n                    note.category = updated.category;\n                    note.error = updated.error;\n                    note.errorMessage = updated.errorMessage;\n                }\n            } else {\n                this.notes.push(updated);\n                this.notesIds[updated.id] = updated;\n            }\n        },\n        remove: function (id) {\n            for(var i=0; i<this.notes.length; i+=1) {\n                var note = this.notes[i];\n                if(note.id === id) {\n                    this.notes.splice(i, 1);\n                    delete this.notesIds[id];\n                    break;\n                }\n            }\n        },\n\n        nthIndexOf: function(str, pattern, n) {\n            var i = -1;\n            while (n-- && i++ < str.length) {\n                i = str.indexOf(pattern, i);\n                if (i < 0) {\n                    break;\n                }\n             }\n             return i;\n         },\n\n         getCategories: function (notes, maxLevel, details) {\n             var categories = {};\n             for(var i=0; i<notes.length; i+=1) {\n                 var cat = notes[i].category;\n                 if(maxLevel>0) {\n                     var index = this.nthIndexOf(cat, '/', maxLevel);\n                     if(index>0) {\n                         cat = cat.substring(0, index);\n                     }\n                 }\n                 if(categories[cat]===undefined) {\n                     categories[cat] = 1;\n                 } else {\n                     categories[cat] += 1;\n                 }\n             }\n             var result = [];\n             for(var category in categories) {\n                 if(details) {\n                     result.push({\n                         name: category,\n                         count: categories[category],\n                     });\n                 } else if(category) {\n                     result.push(category);\n                 }\n             }\n             if(!details) {\n                 result.sort();\n             }\n             return result;\n         },\n\n    };\n\n    return new NotesModel();\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('SaveQueue', function($q) {\n    'use strict';\n\n    var SaveQueue = function () {\n        this._queue = {};\n        this._flushLock = false;\n        this._manualSaveActive = false;\n    };\n\n    SaveQueue.prototype = {\n        add: function (note) {\n            this._queue[note.id] = note;\n            this._flush();\n        },\n        addManual: function (note) {\n            this._manualSaveActive = true;\n            this.add(note);\n        },\n        _flush: function () {\n            // if there are no changes dont execute the requests\n            var keys = Object.keys(this._queue);\n            if(keys.length === 0 || this._flushLock) {\n                return;\n            } else {\n                this._flushLock = true;\n            }\n\n            var self = this;\n            var requests = [];\n\n            // iterate over updated objects and run an update request for\n            // each one of them\n            for(var i=0; i<keys.length; i+=1) {\n                var note = this._queue[keys[i]];\n                // if the update finished, update the modified and title\n                // attributes on the note\n                requests.push(note.put().then(\n                    this._noteUpdateRequest.bind(null, note))\n                    .catch(this._saveFailed.bind(null, note))\n                );\n            }\n            this._queue = {};\n\n            // if all update requests are completed, run the flush\n            // again to update the next batch of queued notes\n            $q.all(requests).then(function () {\n                self._flushLock = false;\n                self._flush();\n                self._manualSaveActive = false;\n            });\n        },\n        _noteUpdateRequest: function (note, response) {\n            note.error = false;\n            note.title = response.title;\n            note.modified = response.modified;\n            note.category = response.category;\n            if(response.content === note.content) {\n                note.unsaved = false;\n            }\n        },\n        _saveFailed: function (note) {\n            note.error = true;\n        },\n        isSaving: function () {\n            return this._flushLock;\n        },\n        isManualSaving: function () {\n            return this._manualSaveActive;\n        },\n    };\n\n    return new SaveQueue();\n});\n","/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// finds the url which should be opened when a link is clicked\n// example: '[hello](http://example.com)'\napp.factory('urlFinder', [function() {\n\t'use strict';\n\n\treturn function urlFinder(element) {\n\t\telement = $(element);\n\n\t\t// special case: click on ')'\n\t\tif(element.is('.cm-url.cm-formatting')) {\n\t\t\tif(element.prev().length !== 0) {\n\t\t\t\telement = element.prev();\n\t\t\t}\n\t\t}\n\n\t\t// skip '[hello]'\n\t\twhile(element.is('.cm-link')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// skip '('\n\t\twhile(element.is('.cm-url.cm-formatting')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// check if we actually have a cm-url\n\t\tif(element.is('.cm-url:not(.cm-formatting)')) {\n\t\t\treturn element.text();\n\t\t}\n\n\t\treturn undefined;\n\t};\n}]);\n"]}